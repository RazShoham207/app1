name: Deploy to AKS using Helm

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Enable debug logging
      run: |
        echo "##[debug]Enable debug logging"
        echo "##[debug]$(env)"

    - name: Checkout code
      uses: actions/checkout@v2
      with:
        repository: RazShoham207/app1
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: restaurantsacr.azurecr.io
        username: ${{ secrets.AZURE_ACR_USERNAME }}
        password: ${{ secrets.AZURE_ACR_PASSWORD }}

    - name: Verify Azure Container Registry Login
      run: |
        az acr login --name restaurantsacr

    - name: Build and push Docker image
      run: |
        docker buildx build --push --tag restaurantsacr.azurecr.io/restaurants-app:latest .

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        repository: RazShoham207/app1
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 1

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set up kubectl
      uses: azure/setup-kubectl@v1
      with:
        version: 'latest'

    - name: Set up Azure CLI
      uses: azure/CLI@v1
      with:
        azcliversion: '2.30.0'
        inlineScript: |
          echo "Azure CLI setup complete"

    - name: Get AKS credentials
      run: |
        az aks get-credentials --resource-group Restaurants-rg --name restaurants-aks

    - name: Verify Kubernetes context
      run: |
        kubectl config view
        kubectl config current-context || echo "No current context set"
        kubectl get nodes || echo "Unable to get nodes"

    - name: Set up Helm
      uses: azure/setup-helm@v1

    - name: Clean up existing ServiceAccount
      run: |
        kubectl delete serviceaccount restaurants-app --ignore-not-found

    - name: Clean up existing Helm release
      run: |
        RELEASE_NAME="restaurants-app"
        if helm ls --namespace default | grep -q $RELEASE_NAME; then
          echo "### Deleting existing release"
          helm uninstall $RELEASE_NAME --namespace default
          # Wait for the release to be fully deleted
          while helm ls --namespace default | grep -q $RELEASE_NAME; do
            echo "### Waiting for release to be fully deleted..."
            sleep 10
          done
          # Force delete any lingering resources
          echo "### Force deleting lingering resources"
          kubectl delete all --selector release=$RELEASE_NAME --namespace default --ignore-not-found
          kubectl delete pvc --selector release=$RELEASE_NAME --namespace default --ignore-not-found
        fi

    - name: Deploy to AKS using Helm
      run: |
        RELEASE_NAME="restaurants-app"
        CHART_PATH="./restaurants-charts"

        if helm ls --namespace default | grep -q $RELEASE_NAME; then
          echo "### Upgrading existing release"
          helm upgrade $RELEASE_NAME $CHART_PATH --set image.repository=restaurantsacr.azurecr.io/restaurants-app --set image.tag=latest --timeout 10m --debug
        else
          echo "### Installing new release"
          helm install $RELEASE_NAME $CHART_PATH --set image.repository=restaurantsacr.azurecr.io/restaurants-app --set image.tag=latest --timeout 10m --debug
        fi

    - name: Fetch logs if job fails
      if: failure()
      run: |
        kubectl logs job/create-pv-pvc
