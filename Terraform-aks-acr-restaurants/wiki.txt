Requesting a Cloud Shell.Succeeded. 
Connecting terminal...

Your Cloud Shell session will be ephemeral so no files or system changes will persist beyond your current session.
raz [ ~ ]$ terraform version
Terraform v1.9.5
on linux_amd64

Your version of Terraform is out of date! The latest version
is 1.10.2. You can update by downloading from https://www.terraform.io/downloads.html
raz [ ~ ]$ kubectl version --client
Client Version: v1.31.0
Kustomize Version: v5.4.2
raz [ ~ ]$ kubectl version --client --output=yaml
clientVersion:
  buildDate: "2024-08-13T07:37:34Z"
  compiler: gc
  gitCommit: 9edcffcde5595e8a5b1a35f88c421764e575afce
  gitTreeState: clean
  gitVersion: v1.31.0
  goVersion: go1.22.5
  major: "1"
  minor: "31"
  platform: linux/amd64
kustomizeVersion: v5.4.2

raz [ ~ ]$ az account show
{
  "environmentName": "AzureCloud",
  "homeTenantId": "339e2a15-710e-4162-ab7e-8d1199b663b9",
  "id": "80fab2d0-ef24-4ff6-a7ed-02a816eee488",
  "isDefault": true,
  "managedByTenants": [],
  "name": "Raz subscription 1",
  "state": "Enabled",
  "tenantId": "339e2a15-710e-4162-ab7e-8d1199b663b9",
  "user": {
    "cloudShellID": true,
    "name": "live.com#raz.shoham207@gmail.com",
    "type": "user"
  }
}
raz [ ~ ]$ pwd
/home/raz
raz [ ~ ]$ ls
raz [ ~ ]$ 
raz [ ~ ]$ 
raz [ ~ ]$ ls
main.tf  outputs.tf  providers.tf  ssh.tf  variables.tf
raz [ ~ ]$ 
raz [ ~ ]$ 
raz [ ~ ]$ terraform init -upgrade
Initializing the backend...
Initializing provider plugins...
- Finding hashicorp/random versions matching "~> 3.0"...
- Finding hashicorp/time versions matching "0.9.1"...
- Finding azure/azapi versions matching "~> 1.5"...
- Finding hashicorp/azurerm versions matching "~> 3.0"...
- Installing hashicorp/random v3.6.3...
- Installed hashicorp/random v3.6.3 (signed by HashiCorp)
- Installing hashicorp/time v0.9.1...
- Installed hashicorp/time v0.9.1 (signed by HashiCorp)
- Installing azure/azapi v1.15.0...
- Installed azure/azapi v1.15.0 (signed by a HashiCorp partner, key ID 6F0B91BDE98478CF)
- Installing hashicorp/azurerm v3.117.0...
- Installed hashicorp/azurerm v3.117.0 (signed by HashiCorp)
Partner and community providers are signed by their developers.
If you'd like to know more about provider signing, you can read about it here:
https://www.terraform.io/docs/cli/plugins/signing.html
Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
raz [ ~ ]$ terraform plan -out main.tfplan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # azapi_resource.ssh_public_key will be created
  + resource "azapi_resource" "ssh_public_key" {
      + body                      = jsonencode({})
      + id                        = (known after apply)
      + ignore_casing             = false
      + ignore_missing_property   = true
      + location                  = "eastus"
      + name                      = (known after apply)
      + output                    = (known after apply)
      + parent_id                 = (known after apply)
      + removing_special_chars    = false
      + schema_validation_enabled = true
      + type                      = "Microsoft.Compute/sshPublicKeys@2022-11-01"
    }

  # azapi_resource_action.ssh_public_key_gen will be created
  + resource "azapi_resource_action" "ssh_public_key_gen" {
      + action                 = "generateKeyPair"
      + id                     = (known after apply)
      + method                 = "POST"
      + output                 = (known after apply)
      + resource_id            = (known after apply)
      + response_export_values = [
          + "publicKey",
          + "privateKey",
        ]
      + type                   = "Microsoft.Compute/sshPublicKeys@2022-11-01"
      + when                   = "apply"
    }

  # azurerm_kubernetes_cluster.k8s will be created
  + resource "azurerm_kubernetes_cluster" "k8s" {
      + api_server_authorized_ip_ranges     = (known after apply)
      + current_kubernetes_version          = (known after apply)
      + dns_prefix                          = (known after apply)
      + fqdn                                = (known after apply)
      + http_application_routing_zone_name  = (known after apply)
      + id                                  = (known after apply)
      + image_cleaner_enabled               = false
      + image_cleaner_interval_hours        = 48
      + kube_admin_config                   = (sensitive value)
      + kube_admin_config_raw               = (sensitive value)
      + kube_config                         = (sensitive value)
      + kube_config_raw                     = (sensitive value)
      + kubernetes_version                  = (known after apply)
      + location                            = "eastus"
      + name                                = (known after apply)
      + node_resource_group                 = (known after apply)
      + node_resource_group_id              = (known after apply)
      + oidc_issuer_url                     = (known after apply)
      + portal_fqdn                         = (known after apply)
      + private_cluster_enabled             = false
      + private_cluster_public_fqdn_enabled = false
      + private_dns_zone_id                 = (known after apply)
      + private_fqdn                        = (known after apply)
      + public_network_access_enabled       = true
      + resource_group_name                 = (known after apply)
      + role_based_access_control_enabled   = true
      + run_command_enabled                 = true
      + sku_tier                            = "Free"
      + support_plan                        = "KubernetesOfficial"
      + workload_identity_enabled           = false

      + api_server_access_profile (known after apply)

      + auto_scaler_profile (known after apply)

      + default_node_pool {
          + kubelet_disk_type    = (known after apply)
          + max_pods             = (known after apply)
          + name                 = "agentpool"
          + node_count           = 3
          + node_labels          = (known after apply)
          + orchestrator_version = (known after apply)
          + os_disk_size_gb      = (known after apply)
          + os_disk_type         = "Managed"
          + os_sku               = (known after apply)
          + scale_down_mode      = "Delete"
          + type                 = "VirtualMachineScaleSets"
          + ultra_ssd_enabled    = false
          + vm_size              = "Standard_D2_v2"
          + workload_runtime     = (known after apply)
        }

      + identity {
          + principal_id = (known after apply)
          + tenant_id    = (known after apply)
          + type         = "SystemAssigned"
        }

      + kubelet_identity (known after apply)

      + linux_profile {
          + admin_username = "azureadmin"

          + ssh_key {
              + key_data = (known after apply)
            }
        }

      + network_profile {
          + dns_service_ip          = (known after apply)
          + docker_bridge_cidr      = (known after apply)
          + ebpf_data_plane         = (known after apply)
          + ip_versions             = (known after apply)
          + load_balancer_sku       = "standard"
          + network_data_plane      = (known after apply)
          + network_mode            = (known after apply)
          + network_plugin          = "kubenet"
          + network_policy          = (known after apply)
          + outbound_ip_address_ids = (known after apply)
          + outbound_ip_prefix_ids  = (known after apply)
          + outbound_type           = "loadBalancer"
          + pod_cidr                = (known after apply)
          + pod_cidrs               = (known after apply)
          + service_cidr            = (known after apply)
          + service_cidrs           = (known after apply)

          + load_balancer_profile (known after apply)

          + nat_gateway_profile (known after apply)
        }

      + windows_profile (known after apply)
    }

  # azurerm_resource_group.rg will be created
  + resource "azurerm_resource_group" "rg" {
      + id       = (known after apply)
      + location = "eastus"
      + name     = (known after apply)
    }

  # random_pet.azurerm_kubernetes_cluster_dns_prefix will be created
  + resource "random_pet" "azurerm_kubernetes_cluster_dns_prefix" {
      + id        = (known after apply)
      + length    = 2
      + prefix    = "dns"
      + separator = "-"
    }

  # random_pet.azurerm_kubernetes_cluster_name will be created
  + resource "random_pet" "azurerm_kubernetes_cluster_name" {
      + id        = (known after apply)
      + length    = 2
      + prefix    = "cluster"
      + separator = "-"
    }

  # random_pet.rg_name will be created
  + resource "random_pet" "rg_name" {
      + id        = (known after apply)
      + length    = 2
      + prefix    = "rg"
      + separator = "-"
    }

  # random_pet.ssh_key_name will be created
  + resource "random_pet" "ssh_key_name" {
      + id        = (known after apply)
      + length    = 2
      + prefix    = "ssh"
        # (1 unchanged attribute hidden)
    }

Plan: 8 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + client_certificate      = (sensitive value)
  + client_key              = (sensitive value)
  + cluster_ca_certificate  = (sensitive value)
  + cluster_password        = (sensitive value)
  + cluster_username        = (sensitive value)
  + host                    = (sensitive value)
  + key_data                = (known after apply)
  + kube_config             = (sensitive value)
  + kubernetes_cluster_name = (known after apply)
  + resource_group_name     = (known after apply)

─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Saved the plan to: main.tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "main.tfplan"
raz [ ~ ]$ ls
main.tf  main.tfplan  outputs.tf  providers.tf  ssh.tf  variables.tf
raz [ ~ ]$ terraform apply main.tfplan
random_pet.azurerm_kubernetes_cluster_dns_prefix: Creating...
random_pet.ssh_key_name: Creating...
random_pet.rg_name: Creating...
random_pet.azurerm_kubernetes_cluster_name: Creating...
random_pet.azurerm_kubernetes_cluster_dns_prefix: Creation complete after 0s [id=dns-singular-dogfish]
random_pet.ssh_key_name: Creation complete after 0s [id=sshenhancedwalrus]
random_pet.rg_name: Creation complete after 0s [id=rg-tender-mullet]
random_pet.azurerm_kubernetes_cluster_name: Creation complete after 0s [id=cluster-frank-llama]
azurerm_resource_group.rg: Creating...
azurerm_resource_group.rg: Creation complete after 9s [id=/subscriptions/80fab2d0-ef24-4ff6-a7ed-02a816eee488/resourceGroups/rg-tender-mullet]
azapi_resource.ssh_public_key: Creating...
azapi_resource.ssh_public_key: Creation complete after 3s [id=/subscriptions/80fab2d0-ef24-4ff6-a7ed-02a816eee488/resourceGroups/rg-tender-mullet/providers/Microsoft.Compute/sshPublicKeys/sshenhancedwalrus]
azapi_resource_action.ssh_public_key_gen: Creating...
azapi_resource_action.ssh_public_key_gen: Creation complete after 0s [id=/subscriptions/80fab2d0-ef24-4ff6-a7ed-02a816eee488/resourceGroups/rg-tender-mullet/providers/Microsoft.Compute/sshPublicKeys/sshenhancedwalrus/generateKeyPair]
azurerm_kubernetes_cluster.k8s: Creating...
azurerm_kubernetes_cluster.k8s: Still creating... [10s elapsed]
╷
│ Error: creating Kubernetes Cluster (Subscription: "80fab2d0-ef24-4ff6-a7ed-02a816eee488"
│ Resource Group Name: "rg-tender-mullet"
│ Kubernetes Cluster Name: "cluster-frank-llama"): performing CreateOrUpdate: unexpected status 400 (400 Bad Request) with response: {
│   "code": "ErrCode_InsufficientVCPUQuota",
│   "details": null,
│   "message": "Insufficient regional vcpu quota left for location eastus. left regional vcpu quota 4, requested quota 6",
│   "subcode": ""
│  }
│ 
│   with azurerm_kubernetes_cluster.k8s,
│   on main.tf line 19, in resource "azurerm_kubernetes_cluster" "k8s":
│   19: resource "azurerm_kubernetes_cluster" "k8s" {
│ 
╵
raz [ ~ ]$ ls -ltr
total 40
-rw-r--r-- 1 raz raz 1167 Dec 24 23:47 main.tf
-rw-r--r-- 1 raz raz 1030 Dec 24 23:47 outputs.tf
-rw-r--r-- 1 raz raz  445 Dec 24 23:47 providers.tf
-rw-r--r-- 1 raz raz  713 Dec 24 23:47 ssh.tf
-rw-r--r-- 1 raz raz 7877 Dec 24 23:48 main.tfplan
-rw-r--r-- 1 raz raz 9923 Dec 24 23:53 terraform.tfstate
-rw-r--r-- 1 raz raz  869 Dec 25 00:00 variables.tf
raz [ ~ ]$ cat variables.tf 
variable "resource_group_location" {
  type        = string
  default     = "eastus"
  description = "Location of the resource group."
}

variable "resource_group_name_prefix" {
  type        = string
  default     = "rg"
  description = "Prefix of the resource group name that's combined with a random ID so name is unique in your Azure subscription."
}

variable "node_count" {
  type        = number
  description = "The initial quantity of nodes for the node pool."
  default     = 2
}

variable "msi_id" {
  type        = string
  description = "The Managed Service Identity ID. Set this value if you're running this example using Managed Identity as the authentication method."
  default     = null
}

variable "username" {
  type        = string
  description = "The admin username for the new cluster."
  default     = "azureadmin"
}raz [ ~ ]$terraform init -upgrade
Initializing the backend...
Initializing provider plugins...
- Finding hashicorp/time versions matching "0.9.1"...
- Finding azure/azapi versions matching "~> 1.5"...
- Finding hashicorp/azurerm versions matching "~> 3.0"...
- Finding hashicorp/random versions matching "~> 3.0"...
- Using previously-installed hashicorp/random v3.6.3
- Using previously-installed hashicorp/time v0.9.1
- Using previously-installed azure/azapi v1.15.0
- Using previously-installed hashicorp/azurerm v3.117.0

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
raz [ ~ ]$ terraform plan -out main.tfplan
random_pet.azurerm_kubernetes_cluster_dns_prefix: Refreshing state... [id=dns-singular-dogfish]
random_pet.azurerm_kubernetes_cluster_name: Refreshing state... [id=cluster-frank-llama]
random_pet.rg_name: Refreshing state... [id=rg-tender-mullet]
random_pet.ssh_key_name: Refreshing state... [id=sshenhancedwalrus]
azurerm_resource_group.rg: Refreshing state... [id=/subscriptions/80fab2d0-ef24-4ff6-a7ed-02a816eee488/resourceGroups/rg-tender-mullet]
azapi_resource.ssh_public_key: Refreshing state... [id=/subscriptions/80fab2d0-ef24-4ff6-a7ed-02a816eee488/resourceGroups/rg-tender-mullet/providers/Microsoft.Compute/sshPublicKeys/sshenhancedwalrus]
azapi_resource_action.ssh_public_key_gen: Refreshing state... [id=/subscriptions/80fab2d0-ef24-4ff6-a7ed-02a816eee488/resourceGroups/rg-tender-mullet/providers/Microsoft.Compute/sshPublicKeys/sshenhancedwalrus/generateKeyPair]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # azurerm_kubernetes_cluster.k8s will be created
  + resource "azurerm_kubernetes_cluster" "k8s" {
      + api_server_authorized_ip_ranges     = (known after apply)
      + current_kubernetes_version          = (known after apply)
      + dns_prefix                          = "dns-singular-dogfish"
      + fqdn                                = (known after apply)
      + http_application_routing_zone_name  = (known after apply)
      + id                                  = (known after apply)
      + image_cleaner_enabled               = false
      + image_cleaner_interval_hours        = 48
      + kube_admin_config                   = (sensitive value)
      + kube_admin_config_raw               = (sensitive value)
      + kube_config                         = (sensitive value)
      + kube_config_raw                     = (sensitive value)
      + kubernetes_version                  = (known after apply)
      + location                            = "eastus"
      + name                                = "cluster-frank-llama"
      + node_resource_group                 = (known after apply)
      + node_resource_group_id              = (known after apply)
      + oidc_issuer_url                     = (known after apply)
      + portal_fqdn                         = (known after apply)
      + private_cluster_enabled             = false
      + private_cluster_public_fqdn_enabled = false
      + private_dns_zone_id                 = (known after apply)
      + private_fqdn                        = (known after apply)
      + public_network_access_enabled       = true
      + resource_group_name                 = "rg-tender-mullet"
      + role_based_access_control_enabled   = true
      + run_command_enabled                 = true
      + sku_tier                            = "Free"
      + support_plan                        = "KubernetesOfficial"
      + workload_identity_enabled           = false

      + api_server_access_profile (known after apply)

      + auto_scaler_profile (known after apply)

      + default_node_pool {
          + kubelet_disk_type    = (known after apply)
          + max_pods             = (known after apply)
          + name                 = "agentpool"
          + node_count           = 2
          + node_labels          = (known after apply)
          + orchestrator_version = (known after apply)
          + os_disk_size_gb      = (known after apply)
          + os_disk_type         = "Managed"
          + os_sku               = (known after apply)
          + scale_down_mode      = "Delete"
          + type                 = "VirtualMachineScaleSets"
          + ultra_ssd_enabled    = false
          + vm_size              = "Standard_D2_v2"
          + workload_runtime     = (known after apply)
        }

      + identity {
          + principal_id = (known after apply)
          + tenant_id    = (known after apply)
          + type         = "SystemAssigned"
        }

      + kubelet_identity (known after apply)

      + linux_profile {
          + admin_username = "azureadmin"

          + ssh_key {
              + key_data = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC8kMGoNo67azlqZh48FVHTbZFtr157KOlSg3GbLrb29LQyE1N6NZUmBMnbk8I0QBlEsLIJ1ByeIfHB/vDzYGH5BYtKqJauW7YfDfC1Lct/Lt79q6q2YBmJ9D5qiIIeHDmXBA86EHm4lvLvlDJTPIr20nyeeXoIeSjBOqunBfYJMOy5FZZrXFs+jRfWHALjYtLaTcKlb3GT3i7V8dBlRfr6VPitIa2WyViFmx/KKlLKYTtLnvqAvjMSpBRMgEIh7I7GtxWDKH/PpVQRRXKE/nlHK6zu90HLtluFDIF6rISxaknQAtIyltj8uVYNp4YqEXbZljGgm8aLpPk7gQwLRyDuVA+smcKr+6Fv90X5ZYJAIbiLGIKRHET9Lj0imcGZm9EPqwJLEO5/fVCzgkMcZrFz9RyrYftBf1hpRxFlMiacVO2iMfz1sq4wCiEx1MoL0bDzqW2kxrTt0KH0Gf/wnFlx1gS3ymG1cfmQ5eYK8vMA6tb83ZSzV1zNcIb8VPC2/NE= generated-by-azure"
            }
        }

      + network_profile {
          + dns_service_ip          = (known after apply)
          + docker_bridge_cidr      = (known after apply)
          + ebpf_data_plane         = (known after apply)
          + ip_versions             = (known after apply)
          + load_balancer_sku       = "standard"
          + network_data_plane      = (known after apply)
          + network_mode            = (known after apply)
          + network_plugin          = "kubenet"
          + network_policy          = (known after apply)
          + outbound_ip_address_ids = (known after apply)
          + outbound_ip_prefix_ids  = (known after apply)
          + outbound_type           = "loadBalancer"
          + pod_cidr                = (known after apply)
          + pod_cidrs               = (known after apply)
          + service_cidr            = (known after apply)
          + service_cidrs           = (known after apply)

          + load_balancer_profile (known after apply)

          + nat_gateway_profile (known after apply)
        }

      + windows_profile (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + client_certificate      = (sensitive value)
  + client_key              = (sensitive value)
  + cluster_ca_certificate  = (sensitive value)
  + cluster_password        = (sensitive value)
  + cluster_username        = (sensitive value)
  + host                    = (sensitive value)
  + kube_config             = (sensitive value)
  + kubernetes_cluster_name = "cluster-frank-llama"

──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Saved the plan to: main.tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "main.tfplan"
raz [ ~ ]$ ls -ltr
total 52
-rw-r--r-- 1 raz raz  1167 Dec 24 23:47 main.tf
-rw-r--r-- 1 raz raz  1030 Dec 24 23:47 outputs.tf
-rw-r--r-- 1 raz raz   445 Dec 24 23:47 providers.tf
-rw-r--r-- 1 raz raz   713 Dec 24 23:47 ssh.tf
-rw-r--r-- 1 raz raz  9923 Dec 24 23:53 terraform.tfstate
-rw-r--r-- 1 raz raz   869 Dec 25 00:00 variables.tf
-rw-r--r-- 1 raz raz 17835 Dec 25 00:01 main.tfplan
raz [ ~ ]$ terraform apply main.tfplan
azurerm_kubernetes_cluster.k8s: Creating...
azurerm_kubernetes_cluster.k8s: Still creating... [10s elapsed]
azurerm_kubernetes_cluster.k8s: Still creating... [20s elapsed]
azurerm_kubernetes_cluster.k8s: Still creating... [30s elapsed]
azurerm_kubernetes_cluster.k8s: Still creating... [40s elapsed]
azurerm_kubernetes_cluster.k8s: Still creating... [50s elapsed]
azurerm_kubernetes_cluster.k8s: Still creating... [1m0s elapsed]
azurerm_kubernetes_cluster.k8s: Still creating... [1m10s elapsed]
azurerm_kubernetes_cluster.k8s: Still creating... [1m20s elapsed]
azurerm_kubernetes_cluster.k8s: Still creating... [1m30s elapsed]
azurerm_kubernetes_cluster.k8s: Still creating... [1m40s elapsed]
azurerm_kubernetes_cluster.k8s: Still creating... [1m50s elapsed]
azurerm_kubernetes_cluster.k8s: Still creating... [2m0s elapsed]
azurerm_kubernetes_cluster.k8s: Still creating... [2m10s elapsed]
azurerm_kubernetes_cluster.k8s: Still creating... [2m20s elapsed]
azurerm_kubernetes_cluster.k8s: Still creating... [2m30s elapsed]
azurerm_kubernetes_cluster.k8s: Still creating... [2m40s elapsed]
azurerm_kubernetes_cluster.k8s: Still creating... [2m50s elapsed]
azurerm_kubernetes_cluster.k8s: Still creating... [3m0s elapsed]
azurerm_kubernetes_cluster.k8s: Still creating... [3m10s elapsed]
azurerm_kubernetes_cluster.k8s: Still creating... [3m20s elapsed]
azurerm_kubernetes_cluster.k8s: Still creating... [3m30s elapsed]
azurerm_kubernetes_cluster.k8s: Creation complete after 3m40s [id=/subscriptions/80fab2d0-ef24-4ff6-a7ed-02a816eee488/resourceGroups/rg-tender-mullet/providers/Microsoft.ContainerService/managedClusters/cluster-frank-llama]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.

Outputs:

client_certificate = <sensitive>
client_key = <sensitive>
cluster_ca_certificate = <sensitive>
cluster_password = <sensitive>
cluster_username = <sensitive>
host = <sensitive>
key_data = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC8kMGoNo67azlqZh48FVHTbZFtr157KOlSg3GbLrb29LQyE1N6NZUmBMnbk8I0QBlEsLIJ1ByeIfHB/vDzYGH5BYtKqJauW7YfDfC1Lct/Lt79q6q2YBmJ9D5qiIIeHDmXBA86EHm4lvLvlDJTPIr20nyeeXoIeSjBOqunBfYJMOy5FZZrXFs+jRfWHALjYtLaTcKlb3GT3i7V8dBlRfr6VPitIa2WyViFmx/KKlLKYTtLnvqAvjMSpBRMgEIh7I7GtxWDKH/PpVQRRXKE/nlHK6zu90HLtluFDIF6rISxaknQAtIyltj8uVYNp4YqEXbZljGgm8aLpPk7gQwLRyDuVA+smcKr+6Fv90X5ZYJAIbiLGIKRHET9Lj0imcGZm9EPqwJLEO5/fVCzgkMcZrFz9RyrYftBf1hpRxFlMiacVO2iMfz1sq4wCiEx1MoL0bDzqW2kxrTt0KH0Gf/wnFlx1gS3ymG1cfmQ5eYK8vMA6tb83ZSzV1zNcIb8VPC2/NE= generated-by-azure"
kube_config = <sensitive>
kubernetes_cluster_name = "cluster-frank-llama"
resource_group_name = "rg-tender-mullet"
raz [ ~ ]$ resource_group_name=$(terraform output -raw resource_group_name)
raz [ ~ ]$ az aks list --resource-group $resource_group_name --query "[].{\"K8s cluster name\":name}" --output table
K8s cluster name
-------------------
cluster-frank-llama
raz [ ~ ]$ echo "$(terraform output kube_config)" > ./azurek8s
raz [ ~ ]$ cat ./azurek8s
<<EOT
apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUU2VENDQXRHZ0F3SUJBZ0lSQU81Y3Q0VFFpUlpIWDJ5dXBHdmxjeVl3RFFZSktvWklodmNOQVFFTEJRQXcKRFRFTE1Ba0dBMVVFQXhNQ1kyRXdJQmNOTWpReE1qSTBNak0xTWpRMFdoZ1BNakExTkRFeU1qVXdNREF5TkRSYQpNQTB4Q3pBSkJnTlZCQU1UQW1OaE1JSUNJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBZzhBTUlJQ0NnS0NBZ0VBCjZlbjV1N3RKa05PaitCRXNxMFdRSlh5N2VhTjlHSzFLeFIrcWt0aHdUVm9sNmkxWDBXQ0xsZ2lHbzkvOWRBdy8KWWkrQTVHc1o2L1VlVEpYUThNdDJlYjNZTS91YUlxUklZbk9LRFhaSFYyWXo1cm95ZDZ1T3NrUE02M1ZrNFUzUQpvcStCd3gvbXVTdzhBdHY3b2ZJZGpDYXRyT0pmeHRwZTlPNUppeG5Ga0NSdmNuVjZEeDFCN2o5NEFSaU5uSGlzCmVzT1Fsc1FHTUtrSzQvcFl4YzBocS8wRzFUUmlXUjBvU0pEVm92V096d01PVlRySEd1R0ZLczBYdVk4ZklKbWoKbXkyU3pFNWRBaGlmQmdmb0ZET0pLSlVMMWNSN0xWY09aSWVrWExsQ3RnNzExUmlVWFcwWDVYT0wvVW9MRnhPUQpHd25ZM0cxZ05xdGwzcXc0SW52K2RWanZ3cnlQcnBuL1BUM2NrMGxrZmlMYjlqWkMxZEhyNkNObXdJVG1uYThUCmZyT1ZwUmMrN1JoUnNjcFpXRXJFaUdkYkI0TmhlQ0dTalE3czY3dGRMSVVJaHc3WC9yejlqUnU5bnhxK3NDQmkKNzMwZDZZMzh2Rzg1Q0FoNE9pSGxUSDJuWllTd2g4UDFCbmtGQW44bkxxYk1ZdGR5YW5xNklvL3J5TVVjeGpLSgordWhjdHpKeGlRQnNDN0xSb3VSM1BtektWbVZBdExla1Z3TXBqQVZVOW9vdUVpZUdJQmhFMVF1STNsTnBNeXBsCnpvMWxDaEJyMTZ4S1ZrSGVxZytNMW1hdTd3ZnlQSmo3UmczVVhDZno5cVl3TXU2eU94R1dYZ2w0anJUOHR0cnkKUXNKNjFpRnlNWUpCZ0NWY1BVeVBOdHdTLzEvVHFScVkzZllqVzhKQ0ExVUNBd0VBQWFOQ01FQXdEZ1lEVlIwUApBUUgvQkFRREFnS2tNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHdIUVlEVlIwT0JCWUVGSktMbGZQeVVQSkZveElkCnRseENLOW1HbW9sZE1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQ0FRRHBFa214Uk1kcFNISkNzcXcrNGpoSXgyZ3oKWEhzTWlWRDRDWkNzZnROd3hEaGtqQldlclUvQTRKUmQ4VUdzRTBxQ3dkZWl6bENUTEFiaU9jbTBhWmxpRFB2MgoyOFlZeGlFNUt5RHZCYUhDbXdJLzFCOWNDUkdBandsRm5oL3ZRdW1uRm0wakg3WmIyalNLU1JaT2RWdGg1RFkyCkk4aGpONkdPd1c5ajhYcnVrVjlBdzBSQXpWOURIR2swTnlkZ0NjQnRqOElVZGpKUThnbEk2TmJNNHVQSElnVloKUkRYeUFtRVJSMzFoazV3Q3hnRm5iWVV3Q1AzeHgvT1BVRm16RjhlUGNOSzNDRXk1MmNUOFg0Nlc5U1djYXp1cgpCcmxWR2JMWEV6bmRycVVXdS8yTkZYS0FSaHRjQlRGYTdXZ3dPR1F1ejFuQ3VnMTIzUG5uNTVaWlVPcHAxaXd6CjZpQWVSa25SOGtXZkZQSDcyZENYaUNMeEFKU1hCdTRXOUFwUmQxcnAzNjNFaGpVV2V2cGxhMElERnRnVE5CWSsKbURYM1JOMEF4YjJlN3RZY3ZPRmdLdzZpckdUT1g2bHpGNnFsY3h4Sk9PSGdZcjFNRlF3d1NudFJIY1dhcUpLSgpsemxmKzE2YXNBcHgvditrUGtQeHhxOGhNRURBdjBNWWVNME43MCswVVVqQXRad0dHUDhKeDl2QU9VTi9WbEJqClhPSXVBR000bnIyTGFLMUpvVnp0TndFbDdlOEgrYkM3eEZZelBqbnZKZ0VCWE1ydmhzcS9BeEl6cFVMdFU1ZmMKdXMzYURmNmZWWWNqQ2diYzhpM05XMmJsSC9mNU1pclJWWUtxcWxkTDBLN2RqeC9yeXFpYVVQMDgrY3hnNFd4ZQpOYUNJbkVsOGJtL2FLOWdPSGc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
    server: https://dns-singular-dogfish-30507ghs.hcp.eastus.azmk8s.io:443
  name: cluster-frank-llama
contexts:
- context:
    cluster: cluster-frank-llama
    user: clusterUser_rg-tender-mullet_cluster-frank-llama
  name: cluster-frank-llama
current-context: cluster-frank-llama
kind: Config
preferences: {}
users:
- name: clusterUser_rg-tender-mullet_cluster-frank-llama
  user:
    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZIVENDQXdXZ0F3SUJBZ0lRT3VNUlZjeDBiMG5RNnpqcTdyRFB1VEFOQmdrcWhraUc5dzBCQVFzRkFEQU4KTVFzd0NRWURWUVFERXdKallUQWVGdzB5TkRFeU1qUXlNelV5TkRSYUZ3MHlOakV5TWpVd01EQXlORFJhTURBeApGekFWQmdOVkJBb1REbk41YzNSbGJUcHRZWE4wWlhKek1SVXdFd1lEVlFRREV3eHRZWE4wWlhKamJHbGxiblF3CmdnSWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUNEd0F3Z2dJS0FvSUNBUURyQlNoYkYzbkNYS0wxVm4vUSs4akgKL0J4VzFHa2V0TEVkZUZLQ2wrY0FIOEdtemh1MklFYkZTSThVbmhqVXVhaEw0eEFnaVI0bVFSdGlVTTh1eUlpQwp2NGFoOXU3c0RRdktSR3VEdlUxSWJFdjhIaXdNa1JVZ1ByNmlyS1hrMlQ5d3RrQUVTMHc1T1BoL2tnMGRGMzVYCjZxeHJIaTh3L0Rpd05WVFdXemVFSTUzOGUwVklpemF5NktIQStnUUF2eG5wL0FjYitPY0dqUTgvbWtsc0JYaUEKR1g5VFVUZHFyTHUxTVBRcFlUWTFZTzBHdU9kUkhNeWJkRHF1cGc4aytkVVc5OC9jSzFFTnE0ZXpiS1k1OVZlUgo4NWFYVlNZNklEay8rOTVEUDl4cUhKVHJQNVVuSFA0NS94WTVWQ1JaVFk5cy9WUkRKZitkOXdraU9NUE9uV2c5Cm1jVERVajhFK1p0RGJjUmIwcjNaclFBdm5kYzV4bm9xZlg0UEZzT3RWTWNHK1d1S0R2YkNhaUgxQTlTdkRQQXYKWUphRTlDNm9iVVlZdWhtU20wSitNOXhyL0xpbkFubCt2S2FjUSt0Z1dkQmJLdmdWbzllSVRvRFBtTFFRa2VUKwpFZHB0ZTJ0NUlHOXlpWVdFMkQ5V2ZFcjBBZnZ3ZlR6TGxoZXB5Y2dwNWl0WXozSldwZ1JXODlmT2N5eGxSSEVYCnpzdFR0a0ZORDhzWWdjR3VuOUxpUU82UFpic05KVmxMMEthK2N6NVpmMVo4aVVZRXJCRytvVnpIVnJ4cVBpSEMKVTg0SDFkbmt6Z29pTGlxY0hFVWw1dVBGMmVBN2FlejRDeXkrbDNtQXpCMy9nRnZSKyt2dGJQUEx1dU9zYW5HKworWnVoUmNzQTM4OU9jQWxDcTVzaUtRSURBUUFCbzFZd1ZEQU9CZ05WSFE4QkFmOEVCQU1DQmFBd0V3WURWUjBsCkJBd3dDZ1lJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWZCZ05WSFNNRUdEQVdnQlNTaTVYejhsRHkKUmFNU0hiWmNRaXZaaHBxSlhUQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FnRUE0ZEVqSGVuczlaN2pOZHBLbmFOMQp4OEk2dzI0MHRnV1VCYWJ4R1BZM2Z2eHljekdwWjJoNEJBRXlpRlNvRi9ZTW1GV0ozUktEWDJxQzBoYVRFQ0JFClB5Vm9TbVJrdFE2TUQvSkJwdjkxTnFlZVFtc05KVllYQWhONUdoa1pQVmxNbGJUWjBWWXNXclJtWVdUYlhpMUcKMTBTZFUxTlpqYVQ3cVlzdnp0Q2FIWmkweGNlRnlhNTZpZUtoZWpQUC9oTVBnc1g2ckNEaVltNU1nTkpHWTJ1eApaS3MzSlByTk1TNFZUdm9NNCtFRytHeVpXeW5yVWxzOUN6NnVqTVFEWUxsb2RFRnVlWDJtdUhJK2h6N2xCWWtTClpZS2d5TWFac2xGNk9ZRkM4b054N3MvTXBoZVI0RzFJc2NXenh4MWREbjVGZFg2dlF1aFpOSFpGdEtzTzN6R1QKaG0rT1FiQWdJU3Nxa0lKNjQwdE41cVJqS3QzK3hPVDhYeExmaVFjb2dmNnZHaVZjdGtnSlQ2dFhNZ1BYY3RDVwo1T1NKcFdVdGhlVzQ3K0FlSEVJMEtFV3R5UUlnVDVSVERtdW5Nell3c0dINSs3M0NNUWwyd2pzR29Uc1Z0QUNQCkVwTjRrRWJjV1QwbzlvVHFqSzBETzVtZVRZRkpuUUM4Q2ZVb0dqV1FERUJVbWNSWWxRU3hZTVBZaDV6RDdMYlQKSGl5THV0dm02VklPZHhsNytxem41UThBVW91ZVMvOXBjTHV6RTBxcU5Bc1Q2UkQ4OFhncmVHVHVuOU5vYzJmYwphMW5MR1Y1VStoRWs0dUJJbGVJNE9RY2FzS1p2bWdkS2FFV0hXTnhOZmx4cS93MUMzdW11ai96bHhETWl6K2V3ClpjaVNXZjhLME1JL2MvWWRyWmdQWW1jPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS1FJQkFBS0NBZ0VBNndVb1d4ZDV3bHlpOVZaLzBQdkl4L3djVnRScEhyU3hIWGhTZ3BmbkFCL0JwczRiCnRpQkd4VWlQRko0WTFMbW9TK01RSUlrZUprRWJZbERQTHNpSWdyK0dvZmJ1N0EwTHlrUnJnNzFOU0d4TC9CNHMKREpFVklENitvcXlsNU5rL2NMWkFCRXRNT1RqNGY1SU5IUmQrVitxc2F4NHZNUHc0c0RWVTFsczNoQ09kL0h0RgpTSXMyc3VpaHdQb0VBTDhaNmZ3SEcvam5CbzBQUDVwSmJBVjRnQmwvVTFFM2FxeTd0VEQwS1dFMk5XRHRCcmpuClVSek1tM1E2cnFZUEpQblZGdmZQM0N0UkRhdUhzMnltT2ZWWGtmT1dsMVVtT2lBNVAvdmVRei9jYWh5VTZ6K1YKSnh6K09mOFdPVlFrV1UyUGJQMVVReVgvbmZjSklqakR6cDFvUFpuRXcxSS9CUG1iUTIzRVc5SzkyYTBBTDUzWApPY1o2S24xK0R4YkRyVlRIQnZscmlnNzJ3bW9oOVFQVXJ3endMMkNXaFBRdXFHMUdHTG9aa3B0Q2ZqUGNhL3k0CnB3SjVmcnltbkVQcllGblFXeXI0RmFQWGlFNkF6NWkwRUpIay9oSGFiWHRyZVNCdmNvbUZoTmcvVm54SzlBSDcKOEgwOHk1WVhxY25JS2VZcldNOXlWcVlFVnZQWHpuTXNaVVJ4Rjg3TFU3WkJUUS9MR0lIQnJwL1M0a0R1ajJXNwpEU1ZaUzlDbXZuTStXWDlXZklsR0JLd1J2cUZjeDFhOGFqNGh3bFBPQjlYWjVNNEtJaTRxbkJ4RkplYmp4ZG5nCk8ybnMrQXNzdnBkNWdNd2QvNEJiMGZ2cjdXenp5N3JqckdweHZ2bWJvVVhMQU4vUFRuQUpRcXViSWlrQ0F3RUEKQVFLQ0FnRUFvRnJJaWo2ZVNVdER0UG5zQS8rSG8wd1ZXZmxjTUNOQnBjWHZKa1BXelhMZGdwNm1zY0djQ0FmVgorRTlXeWU1VE1sUWZNTlBkeW1RcDl3OEVEZnV0aU9oOVNBMWdQNWMzTUM4MjNKQlJKdFVkazB4UzZkQWtCZmhKCndsemlaQjhHOWpTandVcFBHOHdQWVp1WmJ2d1VySS9tVE1Bdm10QzlMUjEyWVR1anlYa3oxbzJWWEVZQWNGbmgKNC9XeXZYK21nc3YvWGNxYWR4SFFFYW1INXpoa1c2TUtDU01sR0pmN0MwbjNqalJSOUdISjJBaFpiREttT0hzNQpmdWkyOUpleUdSWEVzWWlzcVJNY2FBUDk5eFc3Ums1WnRhL1hnVmx6Tm9EM3loTE1wV29UQWVCRU9JZkR2bmFhCkIwdXQ4WERHSjZ0Qnp2OGlSZm5FTmFGZG1LQTErbU11eDE3b0ZnSU1UZno4MTMxVU51eENwaHEvTUgvUlVOWWYKeEtmZ3NxdEVFQ1NXVnZBOEIzQVE5ZG03MDZlNmJXRlRiUEtQaW1yb0tVZUpyYkJSUnYvYy93ckZPaVhpV3JNZQpBWThId0x2QkdNV2ptMG1KdUhhbGJpWXU3YnJ4S3Frd0J2UDhWSDFSaGhGNkt0akQ1UTJESXVuUFhwQnRTWStjClNLWFRxNU53TW9CWVE0SkxOMVM1TVRUUnV3K0xqK0xoR0ZGVzhBTXdPWGpqUCtDaU5mR0UxMktUWWJCZjQ3Y3MKMnRpTlNBMk9OQlNmQ1ArZXZBalF5Y3lWSTltdXBzVng4T1EwMTc0cStTUVBtZEcxSjlvdllXT0hNdGJMUEtycApBZnVmRHAzRDhJcWpnWitBaGYyOEc5V2YvdmU2TSs4cndxMnZ6Mm5seVZMM293TmtNbkVDZ2dFQkFQSzBIcTdPCllxZzJ6cnVqa1JnVGw0eWlrbXUvbU40Vk5FUGRvQlNCQUFHUDNZblpxWEVLVVpGSVFTa2NPN2dWT0NCY2pvUnEKdTh5NDlqR1JuNGtxUlFjOEVkYWVLaG1MQndLZk4yUHhaSW9vcFRmSXJENGp6Yy90cHE5Tjh0M2d3UTdaRU9RbApvb0pCVDBDSDkyRTZKUS8rMDVxcUhtV1BVNkhscGRiVUhNc0VCRVNVZUowZXpscWFxU1czSEd5ZGZjUXRtektjCnFHVSs1aHBzb2VjclptbU9NbWRrcDdkYkZrL295TlZ3cDdubldpRlVtMEdaWitoL2UxRGlqK01UbU5UTlJCbjkKeUc1cGpGTEVHOXNOWGhETjkyeVpTSnZQUXVDS3J1R1RBTGs5L3h5WlZWWHlBQUFXOHFKZXlBcGZ2eFlleEIyTwpnMG9ubmFONlVrako3VThDZ2dFQkFQZmxSMVYzNDExbTFsV1lkd295NFBWclJaaEp0eUJseUZCTFdBckZnM2JECmZ6YytpL2FrK0xaencyazMxZkVYTmFldk1ySyt5Z0xZdWh4VmloWFZVQzZ2K2V5TjFKT1VmV3VkYm5iUDAzRHUKRG9qaGdCV3U5QzE1alk5TnhoT25VdEp4RnlLSVJNMjdiMUd3N1ZTdGFCbXlHU09Ma3BHZkUzQzNKNjhaTzU4SgpWOHFKTk9GUFJ1QXVLSE9HTDN4QnpOZS8yTEtqYS9udzNLTHYzMnoxSDRoYTdrWmpZUWpEL3hrQVc2eU02QmpNCjVwN2lwNlNqUjBSajBlbHFTQUlOSVFYRUVPVVI3U0xuVStNdW93NHQ4cEpVQnorSzFXbTEwQ2RIc1VvMzM5WlEKQS9oaGhzYWVsK2RHUldGZGdDU3BLamtYQ2gvb3lOTVE4Wi8zWmRpWXl3Y0NnZ0VBQ3QyUmVoWDNTTHliYUw4Ygo0YzRPdk5jU1l3eUMxWDV4aHBCSGVHT0dFb3ZVU1RXYlpsb2w2TEVwYWFPLzhLL1NnWEJqV1A1R1JoWUp2NUpiCmFCS2lZSDZKOWVmQ3pyM3dwR2RvWFdzVEt6UkNvVXEwbTF1Uy9Ub1Fla3l0RU0zZEZzTVZCSUhDMHI0RnhFZlMKQldKTEFucFFFdDZHMmRrZXoyS3VsLzJMQkhPN2xTNW9iL0JQSUxOSDIwNWxVVitEbitMQ3pmTkJmcmJnS2xLdQp0T0MyaHdjOHJuQk5LZUpFRDNQR2VmZS9LbzEyOVlNS0tGZXIxVGJQMklFc0craG1zVEEzV2txSVRKa2hGUnQrCmU4SVBjZ1VtakpBWU5oR0RWdlllZWk3UW0zcHhEMkMxOTFFTU92VE1EQVRlUThpaGoyWDFOYldKbnlwQzNteTkKZmxDNzlRS0NBUUJuQlY0VDR2TVdpZnBoTUMrb2lXUjhHY3llY1dRdGpwOGszMnNEYnZvbmpTOTlZZjBBejZhZApESmNWVHlNV1FyTUZzUVc4eXhWaEFYaTI5Y1doTlRsUmJjakx5bFdoejRBZ0RSa3ZQMGQ4RXpMdkorZjNHdkpYClE4RFU0Vm1FS1hGK0M0bTF6RFByM0ExelFiZ2dETURLalAxdGpEK3BUUmJqTFByTkJndUZHSGpucndYTzdRZGoKZTB0TVYyTzhuQXZwVGMxYzBCVzdsYUhjQlJ3eFI5Mkc2V05FMVdBcUtHb0hsZUtEWHp2RnNzSFZIaFRWa3hXMwpFbFRXVUZrRW9UZ3NFVU9FTDJNQnNtbG1iS2RPNlVGNkZubThxcEh1a0tTazdtSjdtYVRvaC9CZWRRbHgyYzcvClNuRGkrZHliWDhJd1g2YlJoQWlSenVUYnVoRVZac3BaQW9JQkFRQ3dMaGNJQnFqdFUyTkRuZzVHeTVtT2xsMUgKZWtqbTI1S1ZPTmFMTmI4NmRKWEFEYzRkaThOTmwvSUJ2VTRBTjB2MGNGcUVlL3lIQ09kVzRFaXVhOEE3c295Ywp0TTVJUGxRTzZabXJveDZ5RW9aT3pNOE1kUmdNL3lVWHhMNHpISUd4QmgzQUNuTlI5aVo4Um15enFmdEdsNGEvCm9leUlvZGlTMk5ESkJGQnlUdXlxbWU5QVN2Y1drZ0trZVFMUlFBR2QrUG9BMzdRT2pWQVdJYjVsL0QzM0dieUUKcll6QjZLcjJuekQ3RnFMUm1tVDR6QVlsNlN1cG9UaEhuRzZGbFBwZTdxSG95KzdtNVJId0hPRjVBRVhNQkNLUApjZEIzSGRGdFFUTlFQOEdhZE10UXRpbit3a1FlR0kyd0dRUmc5WFMvZFVkcjlLQjYzTm9uelZUU2REeUYKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K
    token: p7ual14zyvv1up45s0wsafokm4nvo7655yqj123gryz8ewk40jxm8tosw6y7hweo0x7cocdnhwjce6lsat4fcf6qrfcem4fkdblpfxbl7hytu82qrva449jpxlcp0w4u

EOT
raz [ ~ ]$